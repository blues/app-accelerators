generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["extendedIndexes"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Project {
  id         Int       @id @default(autoincrement())
  createdAt  DateTime  @default(now()) @map("created_at")
  projectUID String    @map("project_uid") @unique
  name       String    @db.VarChar(50)
  gateways   Gateway[]

  // the ReadingSource this project represents
  readingSource     ReadingSource @relation(fields: [reading_source_id], references: [id], onDelete: Cascade)
  reading_source_id Int           @unique

  @@map("project")
}

// A gateway comprises a sparrow device and a notecard. For now, the SparrowDevice itself isn't important
model Gateway {
  id                Int @id @default(autoincrement())

  // unique device uid in notehub
  deviceUID         String @unique @map("device_uid") @db.VarChar(64)

  // device serial number (cached)
  name              String? @db.VarChar(80) // cached
  locationName      String? @db.VarChar(200) // cached
  lastSeenAt        DateTime? @map("last_seen_at") // the last time an event was heard from this device

  // the project the device belongs to
  project           Project @relation(fields: [project_id], references: [id])
  project_id        Int

  // the nodes paired with this gateway
  nodes             Node[]

  // the radio providing LoRa connectivity to this gateway
  // radio         Node?     @relation(fields:[radio_id], references:[id]) // the node that corresponds to the sensor details for this
  // radio_id      Int

  // the ReadingSource this gateway represents
  readingSource     ReadingSource @relation(fields: [reading_source_id], references: [id], onDelete: Cascade)
  reading_source_id Int           @unique

  pin               String?   @db.VarChar(20) // MAX_PIN_LENGTH

  @@index([project_id])
  @@index([deviceUID])
  @@map("gateway")
}

model Node {
  id Int @id @default(autoincrement())

  nodeEUI           String    @unique @map("node_eui") @db.VarChar(24)

  name              String?   @db.VarChar(49) // cached
  locationName      String?   @db.VarChar(200) // cached
  label             String?   @db.VarChar(50) // max 50
  comment           String?   @db.VarChar(3000)
  lastSeenAt        DateTime? @map("last_seen_at") // the last time an event was heard from this device

  gateway           Gateway @relation(fields: [gateway_id], references: [id])    // todo - cascade delete?
  gateway_id        Int

  //notecard        Gateway?    // set if this node is the lora radio for a gateway
  readingSource     ReadingSource @relation(fields: [reading_source_id], references: [id], onDelete: Cascade)
  reading_source_id Int           @unique

  pin               String?   @db.VarChar(20)   // MAX_PIN_LENGTH

  @@index([gateway_id])
  @@map("node")
}

enum ReadingSourceType {
  NODE
  GATEWAY
  PROJECT
  GLOBAL
}

// Corresponds most typically to a sensor on a device producing readings as events
model Sensor {
  id                Int               @id @default(autoincrement())

  // the reading source that owns this sensor
  readingSource     ReadingSource     @relation(fields: [reading_source_id], references: [id], onDelete: Cascade)
  reading_source_id Int

  // the schema associated with the readings produced by this sensor
  schema            ReadingSchema     @relation(fields: [schema_id], references: [id])
  schema_id         Int

  // all the readings produced by this sensor
  readings          Reading[]

  latest            Reading?          @relation(name: "latest", fields: [latest_id], references: [id])
  latest_id         Int?              @unique

  @@unique([reading_source_id, schema_id])    // natural key


  @@map("sensor")

}

// A source of reading schema and readings. This abstracts away from the nature of the device that sent the readings and where
// the reading schema comes from, so it can be per device, per firmware, per something else.
model ReadingSource {
  id                Int               @id @default(autoincrement())
  type              ReadingSourceType

  readingSchemas    ReadingSchema[]   // the schema defined on this source.
  sensors           Sensor[]          // the Sensors producing data from this reading source (sensors on a node or gateway)

  // provides the backreference for the owner of this reading source.
  gateway           Gateway?
  node              Node?
  project           Project?

  @@map("reading_source")
}

enum ReadingSchemaValueType {
  SCALAR_INT
  SCALAR_FLOAT
  COMPOSITE
  STRING
}

// describes the nature of a sensor reading and how to extract it from notehub data
// for better normalization the notehub data could be made separate
model ReadingSchema {
  id                  Int           @id @default(autoincrement())

  // Unique ID so that the other fields can change yet the db.init script can still update
  // the business key.
  uuid                String        @db.Uuid @default(uuid()) @unique

  displayMeasure      String?       @db.VarChar(200)
  displayName         String?       @db.VarChar(50)

  name                String        @unique @db.VarChar(50)     // specific name for this type of sensor
  measure             String        @db.VarChar(50)             // a more general name

  // the place in the hierarchy where this schema is defined
  readingSource       ReadingSource @relation(fields: [reading_source_id], references: [id], onDelete: Cascade)
  reading_source_id   Int

  // the name of the event that provides the sensor data.  
  eventName           String        @map("event_name") @db.VarChar(32) // "*#air.qo"
  spec                Json          // type descriptor for the event schema. Most typically just `{ count: number }`.
  prereq              Json?         // prerequisites that should appear in the event
  unitSymbol          String?       @db.VarChar(10)
  unit                String?
  valueType           ReadingSchemaValueType
  scale               Int           @default(1)

  sensors             Sensor[]  // The sensors that provide data according to this schema

  @@index([reading_source_id])
  @@index([reading_source_id, eventName])
  @@map("reading_schema")
}

// A single reading from a sensor on a specific device
model Reading {
  id                Int             @id @default(autoincrement())

  // the sensor that produced this reading
  sensor            Sensor          @relation(fields: [sensor_id], references: [id], onDelete: Cascade)
  sensor_id         Int

  // when the sensor reading was taken
  when              DateTime
  value             Json

  latest            Sensor?         @relation(name: "latest")

  @@unique([sensor_id, when, value])    // natural key
  @@index([sensor_id])
  @@map("reading")
}

model Notification {
  id                  String        @db.Uuid @default(uuid()) @unique
  type                String        @db.VarChar(50)
  content             Json
  when                DateTime
  @@map("notification")
}
