import { useEffect, useState } from "react";
import { QueryClient, QueryClientProvider } from "react-query";
import { AppProps } from "next/app";
import Head from "next/head";
import { useRouter } from "next/router";
import PubNub from "pubnub";
import { PubNubProvider } from "pubnub-react";
import Notifications from "../components/elements/Notifications";
import Layout from "../components/layout/Layout";
import config from "../../Config";
import "../styles/globals.css";

require("../styles/antd-variables.less");

const queryClient = new QueryClient();

const pubnub = new PubNub({
  publishKey: `${config.pubnubPublishKey}`,
  subscribeKey: `${config.pubnubSubscribeKey}`,
  uuid: "nf1", // todo make this a configurable constant as well?
});

const MyApp = ({ Component, pageProps }: AppProps) => {
  const [isLoading, setIsLoading] = useState(false);
  const [isPubNubEnabled, setIsPubNubEnabled] = useState(false);
  const Router = useRouter();

  useEffect(() => {
    Router.events.on("routeChangeStart", () => setIsLoading(true));
    Router.events.on("routeChangeComplete", () => setIsLoading(false));
    Router.events.on("routeChangeError", () => setIsLoading(false));
  }, [Router.events]);

  useEffect(() => {
    const checkIsPubNubEnabled = () => {
      if (config.pubnubPublishKey !== "" && config.pubnubSubscribeKey !== "") {
        console.log("PubNub is enabled");
        setIsPubNubEnabled(true);
      }
      console.log("PubNub is NOT enabled, fall back to polling React Query");
      setIsPubNubEnabled(false);
    };

    checkIsPubNubEnabled();
  }, []);

  return (
    <div>
      {isPubNubEnabled ? (
        <PubNubProvider client={pubnub}>
          <QueryClientProvider client={queryClient}>
            <Head>
              <title>Reference Web App</title>
              <meta name="description" content="Generated by create next app" />
              <link
                rel="icon"
                type="image/png"
                sizes="32x32"
                href="/favicon-32x32.png"
              />
              <link
                rel="icon"
                type="image/png"
                sizes="16x16"
                href="/favicon-16x16.png"
              />
            </Head>
            <Layout isLoading={isLoading}>
              <Notifications items={[]} />
              <Component {...pageProps} />
            </Layout>
          </QueryClientProvider>
        </PubNubProvider>
      ) : (
        <QueryClientProvider client={queryClient}>
          <Head>
            <title>Reference Web App</title>
            <meta name="description" content="Generated by create next app" />
            <link
              rel="icon"
              type="image/png"
              sizes="32x32"
              href="/favicon-32x32.png"
            />
            <link
              rel="icon"
              type="image/png"
              sizes="16x16"
              href="/favicon-16x16.png"
            />
          </Head>
          <Layout isLoading={isLoading}>
            <Notifications items={[]} />
            <Component {...pageProps} />
          </Layout>
        </QueryClientProvider>
      )}
    </div>
  );
};

export default MyApp;
