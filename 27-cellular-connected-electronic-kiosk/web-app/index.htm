<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="stylesheet" href="./styles.css" />
    <title>Cellular Connected Electronic Kiosk</title>
    <script type="module">
      async function loadScript(scriptId, scriptPath) {
        return new Promise((resolve, reject) => {
          try {
            // remove any previously existing scripts from head
            if (document.getElementById(scriptId)) {
              document.getElementById(scriptId).remove();
            }
            const head = document.getElementsByTagName("head")[0];

            const script = document.createElement("script");
            script.id = scriptId;
            script.src = scriptPath;

            script.addEventListener("load", (ev) => {
              resolve({ status: true });
            });

            script.addEventListener("error", (ev) => {
              reject({
                status: false,
                message: "Failed to load the script",
              });
            });

            head.appendChild(script);
          } catch (error) {
            reject(error);
          }
        });
      }

      // make this a secret
      const WEATHER_API_KEY = "48b0ff8ab3ed495780c203951232604";

      const DAYS = 8; // fetch one more day in the future to get the week ahead

      const BASE_URL = "http://api.weatherapi.com/v1";

      async function getForecastWeather(city) {
        const response = await fetch(
          `${BASE_URL}/forecast.json?key=${WEATHER_API_KEY}&q=${city}&days=${DAYS}&aqi=no&alerts=no`
        );
        const forecastWeather = await response.json();
        return forecastWeather;
      }

      // get weather data as soon as the page loads
      await loadScript("data", "./data.js");
      const weatherList = await Promise.all(
        data.cities.map((city) => getForecastWeather(city))
      );
      renderWeatherHTML(weatherList);

      // time to refetch fresh weather data in milliseconds (30000 = 30 seconds)
      const refreshInterval = 30000;

      // fetch fresh weather data & cities every X number of milliseconds
      setInterval(async function () {
        await loadScript("data", "./data.js");
        const weatherList = await Promise.all(
          data.cities.map((city) => getForecastWeather(city))
        );
        renderWeatherHTML(weatherList);
      }, refreshInterval);

      function renderWeatherHTML(weatherList) {
        // remove previously rendered templates
        if (document.getElementsByClassName("weather-template")) {
          const prevTemplates = document.querySelectorAll(".weather-template");
          prevTemplates.forEach((template) => {
            template.remove();
          });
        }

        const currentOptions = { weekday: "long" };
        const currentDateTimeFormat = new Intl.DateTimeFormat(
          "en-US",
          currentOptions
        );

        // identify html template
        const template = document.querySelector("#template");
        // make a template clone function
        const clone = template.content.cloneNode(true);
        // clone the weather template's contents
        const weatherTemplate = clone.querySelector(".weather-template");
        // identify where to place new template clones when complete
        const weatherForecastContainer = document.querySelector(
          ".weather-forecast-container"
        );

        // list of weather from list of cities fetched from weather API
        weatherList.forEach((weather) => {
          let weatherTemplateClone = weatherTemplate.cloneNode(true);

          // current day
          const currentDate = new Date(weather.forecast.forecastday[0].date);
          const formattedDate = currentDateTimeFormat.format(currentDate);
          weatherTemplateClone.querySelector(
            ".current-date"
          ).innerHTML = ` ${formattedDate}`;

          // location
          weatherTemplateClone.querySelector(
            ".location"
          ).innerHTML = `${weather.location.name}, ${weather.location.country}`;

          // current temperature
          weatherTemplateClone.querySelector(
            ".current-temp"
          ).innerHTML = `${weather.current.feelslike_f} °f`;

          const splitIconString = weather.current.condition.icon.split("/");
          const imgPng = splitIconString[6];
          if (weather.current.is_day === 1) {
            // condition icon daytime
            weatherTemplateClone.querySelector(
              ".condition-icon"
            ).src = `./images/weather-icons/day/${imgPng}`;
            // background of template daytime
            weatherTemplateClone.style.backgroundImage="url('./images/kiosk_daytime_background.webp')";
          } else {
            // condition icon nighttime
            weatherTemplateClone.querySelector(
              ".condition-icon"
            ).src = `./images/weather-icons/night/${imgPng}`;
             // background of template nighttime
             weatherTemplateClone.style.backgroundImage="url('./images/kiosk_nighttime_background.webp')";

          }

          // condition text
          weatherTemplateClone.querySelector(
            ".condition-text"
          ).innerHTML = `${weather.current.condition.text}`;

          // wind speed
          weatherTemplateClone.querySelector(
            ".wind-speed"
          ).innerHTML = `Wind: ${weather.current.wind_mph} mph`;

          // rainfall
          weatherTemplateClone.querySelector(
            ".rainfall"
          ).innerHTML = `Rainfall: ${weather.current.precip_in} in`;

          // pressure
          weatherTemplateClone.querySelector(
            ".pressure"
          ).innerHTML = `Pressure: ${weather.current.pressure_in} in`;

          // future forecast table
          const tbody = weatherTemplateClone.querySelector(".future-forecast");
          const tableOptions = { weekday: "short" };
          const tableDateTimeFormat = new Intl.DateTimeFormat(
            "en-US",
            tableOptions
          );
          // remove first element from forecast array - we don't want today's info
          const shortenedWeatherForecast =
            weather.forecast.forecastday.slice(1);
          shortenedWeatherForecast.forEach((day) => {
            const splitIconString = day.day.condition.icon.split("/");
            const imgPng = splitIconString[6];
            const imgSrc = `./images/weather-icons/day/${imgPng}`;
            const date = new Date(day.date);

            const tr = tbody.insertRow();
            tr.insertCell().innerText = tableDateTimeFormat.format(date);
            tr.insertCell().innerHTML = `<img src=${imgSrc} />`;
            tr.insertCell().innerText = `${day.day.avgtemp_f} °f`;
          });

          weatherForecastContainer.append(weatherTemplateClone);
        });
      }
    </script>
  </head>
  <body>
    <div id="root">
      <header class="header">
        <h1>Cellular Connected Electronic Kiosk</h1>
        <p>Blues Wireless Demo</p>
      </header>
      <section class="weather-carousel" aria-label="Gallery">
        <div class="weather-forecast-container"></div>
      </section>
    </div>

    <template id="template">
      <div class="weather-template">
        <div class="current-header-wrapper">
          <div class="current-date"></div>
          <h2 class="location">Loading current weather...</h2>
        </div>
        <div class="current-conditions">
          <div>
            <span class="conditions">
              <img class="condition-icon" src="" />
              <span class="condition-text" />
            </span>
          </div>
          <div class="current-temp"></div>
          <div class="details">
            <div class="wind-speed"></div>
            <div class="rainfall"></div>
            <div class="pressure"></div>
          </div>
        </div>
        <table>
          <tbody class="future-forecast"></tbody>
        </table>
        <div class="weather-carousel-snapper"></div>
      </div>
    </template>
  </body>
</html>
